{"ast":null,"code":"export const submitData = async function (url, method, data) {\n  let contentType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'application/json';\n  const res = await fetch(url, {\n    method: method,\n    headers: {\n      'Content-Type': contentType\n    },\n    body: JSON.stringify(data)\n  });\n  if (res.status === 200) return true;\n  return false;\n};\nexport const validate = (e, form) => {\n  if (e.type === 'submit') {\n    const errors = {};\n    errors.name = validate_name(form.name);\n    errors.email = validate_email(form.email);\n    errors.comments = validate_comments(form.comments);\n    return errors;\n  } else {\n    const {\n      id,\n      value\n    } = e.target;\n    switch (id) {\n      case 'name':\n        return validate_name(value);\n      case 'email':\n        return validate_email(value);\n      case 'comments':\n        return validate_comments(value);\n    }\n  }\n};\nconst validate_name = value => {\n  if (!value) return 'A name is required';else if (value.length < 2) return 'Must be a valid name';else return null;\n};\nconst validate_email = value => {\n  const regex_email = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  if (!value) return 'An email address is required';else if (!regex_email.test(value)) return 'Must be a valid email address';else return null;\n};\nconst validate_comments = value => {\n  if (!value) return 'A comment is required';else if (value.length < 5) return 'Your comment must be at least 5 characters long';else return null;\n};\n\n/*export const submitData = async (url:string, method:string, data:string, contentType = 'application/json') => {\r\n    \r\n    const res = await fetch(url, {\r\n        method: method,\r\n        headers: {\r\n        'Content-Type': contentType\r\n        },\r\n        body: data\r\n    })\r\n\r\n    if (res.status === 200)\r\n        return true\r\n\r\n    return false\r\n}\r\n\r\ninterface FormData {\r\n    name: string;\r\n    email: string;\r\n    comments: string;\r\n  }\r\n\r\nexport const validate = (e : Event, form = null) => {\r\n   if (e.type === 'submit') {\r\n    const errors = {}\r\n    errors.name = validate_name(form.name)\r\n    errors.email = validate_email(form.email)\r\n    errors.comments = validate_comments(form.comments)\r\n    return errors\r\n\r\n   } else {\r\n        const {id, value} = e.target\r\n        switch(id) {\r\n            case 'name':\r\n                return validate_name(value)\r\n            case 'email':\r\n                return validate_email(value)\r\n            case 'comments':\r\n                return validate_comments(value)\r\n        }\r\n   }\r\n}\r\n\r\n\r\nconst validate_name = (value) => {\r\n    if (!value)\r\n        return 'A name is required'\r\n    else if (value.length < 2)\r\n        return 'Must be a valid name'\r\n    else\r\n        return null\r\n}\r\n\r\nconst validate_email = (value) => {\r\n    const regex_email = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    \r\n    if (!value)\r\n        return 'An email address is required'\r\n    else if (!regex_email.test(value))\r\n        return 'Must be a valid email address'\r\n    else\r\n        return null\r\n}\r\n\r\nconst validate_comments = (value) => {\r\n    if (!value)\r\n        return 'A comment is required'\r\n    else if (value.length < 5)\r\n        return 'Your comment must be at least 5 characters long'\r\n    else\r\n        return null\r\n}\r\n*/","map":{"version":3,"names":["submitData","url","method","data","contentType","arguments","length","undefined","res","fetch","headers","body","JSON","stringify","status","validate","e","form","type","errors","name","validate_name","email","validate_email","comments","validate_comments","id","value","target","regex_email","test"],"sources":["D:/CodeDocs/Class/Noah/Assignment/React-App/React_Typescript/OlldReactWebsite/src/assets/scripts/submit_and_validation.tsx"],"sourcesContent":["interface FormData {\r\n    name: string;\r\n    email: string;\r\n    comments: string;\r\n}\r\nexport const submitData = async (url:string, method:string, data:FormData, contentType = 'application/json') => {\r\n    \r\n    const res = await fetch(url, {\r\n        method: method,\r\n        headers: {\r\n        'Content-Type': contentType\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n\r\n    if (res.status === 200)\r\n        return true\r\n\r\n    return false\r\n}\r\n\r\n\r\n\r\nexport const validate = (e : Event, form: FormData) => {\r\n   if (e.type === 'submit') {\r\n    const errors = {}\r\n    errors.name = validate_name(form.name)\r\n    errors.email = validate_email(form.email)\r\n    errors.comments = validate_comments(form.comments)\r\n    return errors\r\n\r\n   } else {\r\n        const {id, value} = e.target\r\n        switch(id) {\r\n            case 'name':\r\n                return validate_name(value)\r\n            case 'email':\r\n                return validate_email(value)\r\n            case 'comments':\r\n                return validate_comments(value)\r\n        }\r\n   }\r\n}\r\n\r\nconst validate_name = (value: string): string | null => {\r\n    if (!value)\r\n        return 'A name is required'\r\n    else if (value.length < 2)\r\n        return 'Must be a valid name'\r\n    else\r\n        return null\r\n}\r\n\r\nconst validate_email = (value: string): string | null => {\r\n    const regex_email = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    \r\n    if (!value)\r\n        return 'An email address is required'\r\n    else if (!regex_email.test(value))\r\n        return 'Must be a valid email address'\r\n    else\r\n        return null\r\n}\r\n\r\nconst validate_comments = (value: string): string | null => {\r\n    if (!value)\r\n        return 'A comment is required'\r\n    else if (value.length < 5)\r\n        return 'Your comment must be at least 5 characters long'\r\n    else\r\n        return null\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*export const submitData = async (url:string, method:string, data:string, contentType = 'application/json') => {\r\n    \r\n    const res = await fetch(url, {\r\n        method: method,\r\n        headers: {\r\n        'Content-Type': contentType\r\n        },\r\n        body: data\r\n    })\r\n\r\n    if (res.status === 200)\r\n        return true\r\n\r\n    return false\r\n}\r\n\r\ninterface FormData {\r\n    name: string;\r\n    email: string;\r\n    comments: string;\r\n  }\r\n\r\nexport const validate = (e : Event, form = null) => {\r\n   if (e.type === 'submit') {\r\n    const errors = {}\r\n    errors.name = validate_name(form.name)\r\n    errors.email = validate_email(form.email)\r\n    errors.comments = validate_comments(form.comments)\r\n    return errors\r\n\r\n   } else {\r\n        const {id, value} = e.target\r\n        switch(id) {\r\n            case 'name':\r\n                return validate_name(value)\r\n            case 'email':\r\n                return validate_email(value)\r\n            case 'comments':\r\n                return validate_comments(value)\r\n        }\r\n   }\r\n}\r\n\r\n\r\nconst validate_name = (value) => {\r\n    if (!value)\r\n        return 'A name is required'\r\n    else if (value.length < 2)\r\n        return 'Must be a valid name'\r\n    else\r\n        return null\r\n}\r\n\r\nconst validate_email = (value) => {\r\n    const regex_email = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    \r\n    if (!value)\r\n        return 'An email address is required'\r\n    else if (!regex_email.test(value))\r\n        return 'Must be a valid email address'\r\n    else\r\n        return null\r\n}\r\n\r\nconst validate_comments = (value) => {\r\n    if (!value)\r\n        return 'A comment is required'\r\n    else if (value.length < 5)\r\n        return 'Your comment must be at least 5 characters long'\r\n    else\r\n        return null\r\n}\r\n*/"],"mappings":"AAKA,OAAO,MAAMA,UAAU,GAAG,eAAAA,CAAOC,GAAU,EAAEC,MAAa,EAAEC,IAAa,EAAuC;EAAA,IAArCC,WAAW,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,kBAAkB;EAEvG,MAAMG,GAAG,GAAG,MAAMC,KAAK,CAACR,GAAG,EAAE;IACzBC,MAAM,EAAEA,MAAM;IACdQ,OAAO,EAAE;MACT,cAAc,EAAEN;IAChB,CAAC;IACDO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,IAAI;EAC7B,CAAC,CAAC;EAEF,IAAIK,GAAG,CAACM,MAAM,KAAK,GAAG,EAClB,OAAO,IAAI;EAEf,OAAO,KAAK;AAChB,CAAC;AAID,OAAO,MAAMC,QAAQ,GAAGA,CAACC,CAAS,EAAEC,IAAc,KAAK;EACpD,IAAID,CAAC,CAACE,IAAI,KAAK,QAAQ,EAAE;IACxB,MAAMC,MAAM,GAAG,CAAC,CAAC;IACjBA,MAAM,CAACC,IAAI,GAAGC,aAAa,CAACJ,IAAI,CAACG,IAAI,CAAC;IACtCD,MAAM,CAACG,KAAK,GAAGC,cAAc,CAACN,IAAI,CAACK,KAAK,CAAC;IACzCH,MAAM,CAACK,QAAQ,GAAGC,iBAAiB,CAACR,IAAI,CAACO,QAAQ,CAAC;IAClD,OAAOL,MAAM;EAEd,CAAC,MAAM;IACF,MAAM;MAACO,EAAE;MAAEC;IAAK,CAAC,GAAGX,CAAC,CAACY,MAAM;IAC5B,QAAOF,EAAE;MACL,KAAK,MAAM;QACP,OAAOL,aAAa,CAACM,KAAK,CAAC;MAC/B,KAAK,OAAO;QACR,OAAOJ,cAAc,CAACI,KAAK,CAAC;MAChC,KAAK,UAAU;QACX,OAAOF,iBAAiB,CAACE,KAAK,CAAC;IAAA;EAE5C;AACH,CAAC;AAED,MAAMN,aAAa,GAAIM,KAAa,IAAoB;EACpD,IAAI,CAACA,KAAK,EACN,OAAO,oBAAoB,MAC1B,IAAIA,KAAK,CAACrB,MAAM,GAAG,CAAC,EACrB,OAAO,sBAAsB,MAE7B,OAAO,IAAI;AACnB,CAAC;AAED,MAAMiB,cAAc,GAAII,KAAa,IAAoB;EACrD,MAAME,WAAW,GAAG,2JAA2J;EAE/K,IAAI,CAACF,KAAK,EACN,OAAO,8BAA8B,MACpC,IAAI,CAACE,WAAW,CAACC,IAAI,CAACH,KAAK,CAAC,EAC7B,OAAO,+BAA+B,MAEtC,OAAO,IAAI;AACnB,CAAC;AAED,MAAMF,iBAAiB,GAAIE,KAAa,IAAoB;EACxD,IAAI,CAACA,KAAK,EACN,OAAO,uBAAuB,MAC7B,IAAIA,KAAK,CAACrB,MAAM,GAAG,CAAC,EACrB,OAAO,iDAAiD,MAExD,OAAO,IAAI;AACnB,CAAC;;AAUD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}