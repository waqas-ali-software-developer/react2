{"ast":null,"code":"\n\n/*export const submitData = async (url:string, method:string, data:string, contentType = 'application/json') => {\r\n    \r\n    const res = await fetch(url, {\r\n        method: method,\r\n        headers: {\r\n        'Content-Type': contentType\r\n        },\r\n        body: data\r\n    })\r\n\r\n    if (res.status === 200)\r\n        return true\r\n\r\n    return false\r\n}\r\n\r\ninterface FormData {\r\n    name: string;\r\n    email: string;\r\n    comments: string;\r\n  }\r\n\r\nexport const validate = (e : Event, form = null) => {\r\n   if (e.type === 'submit') {\r\n    const errors = {}\r\n    errors.name = validate_name(form.name)\r\n    errors.email = validate_email(form.email)\r\n    errors.comments = validate_comments(form.comments)\r\n    return errors\r\n\r\n   } else {\r\n        const {id, value} = e.target\r\n        switch(id) {\r\n            case 'name':\r\n                return validate_name(value)\r\n            case 'email':\r\n                return validate_email(value)\r\n            case 'comments':\r\n                return validate_comments(value)\r\n        }\r\n   }\r\n}\r\n\r\n\r\nconst validate_name = (value) => {\r\n    if (!value)\r\n        return 'A name is required'\r\n    else if (value.length < 2)\r\n        return 'Must be a valid name'\r\n    else\r\n        return null\r\n}\r\n\r\nconst validate_email = (value) => {\r\n    const regex_email = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    \r\n    if (!value)\r\n        return 'An email address is required'\r\n    else if (!regex_email.test(value))\r\n        return 'Must be a valid email address'\r\n    else\r\n        return null\r\n}\r\n\r\nconst validate_comments = (value) => {\r\n    if (!value)\r\n        return 'A comment is required'\r\n    else if (value.length < 5)\r\n        return 'Your comment must be at least 5 characters long'\r\n    else\r\n        return null\r\n}\r\n*/","map":{"version":3,"names":[],"sources":["D:/CodeDocs/Class/Noah/Assignment/React-App/React_Typescript/OlldReactWebsite/src/assets/scripts/submit_and_validation.tsx"],"sourcesContent":["\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*export const submitData = async (url:string, method:string, data:string, contentType = 'application/json') => {\r\n    \r\n    const res = await fetch(url, {\r\n        method: method,\r\n        headers: {\r\n        'Content-Type': contentType\r\n        },\r\n        body: data\r\n    })\r\n\r\n    if (res.status === 200)\r\n        return true\r\n\r\n    return false\r\n}\r\n\r\ninterface FormData {\r\n    name: string;\r\n    email: string;\r\n    comments: string;\r\n  }\r\n\r\nexport const validate = (e : Event, form = null) => {\r\n   if (e.type === 'submit') {\r\n    const errors = {}\r\n    errors.name = validate_name(form.name)\r\n    errors.email = validate_email(form.email)\r\n    errors.comments = validate_comments(form.comments)\r\n    return errors\r\n\r\n   } else {\r\n        const {id, value} = e.target\r\n        switch(id) {\r\n            case 'name':\r\n                return validate_name(value)\r\n            case 'email':\r\n                return validate_email(value)\r\n            case 'comments':\r\n                return validate_comments(value)\r\n        }\r\n   }\r\n}\r\n\r\n\r\nconst validate_name = (value) => {\r\n    if (!value)\r\n        return 'A name is required'\r\n    else if (value.length < 2)\r\n        return 'Must be a valid name'\r\n    else\r\n        return null\r\n}\r\n\r\nconst validate_email = (value) => {\r\n    const regex_email = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    \r\n    if (!value)\r\n        return 'An email address is required'\r\n    else if (!regex_email.test(value))\r\n        return 'Must be a valid email address'\r\n    else\r\n        return null\r\n}\r\n\r\nconst validate_comments = (value) => {\r\n    if (!value)\r\n        return 'A comment is required'\r\n    else if (value.length < 5)\r\n        return 'Your comment must be at least 5 characters long'\r\n    else\r\n        return null\r\n}\r\n*/"],"mappings":";;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}